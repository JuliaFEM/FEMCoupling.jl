# This file is a part of JuliaFEM.
# License is MIT: see https://github.com/JuliaFEM/FEMCoupling.jl/blob/master/LICENSE

# using JuliaFEM
using FEMCoupling
printa(x) = show(IOContext(STDOUT, limit=true, displaysize=(1000,1000)), "text/plain", x)

# Validation of kinematic coupling: we have 1x1x1 brick which is fixed at z=0
# Reference node is 1 away from the brick in z direction and twist is applied

# This test is decoupled from JuliaFEM by assembling stiffness matrix and
# saving it as a test resource. Stiffness matrix can be read back using
# readdlm.

X = Dict(
    1 => [0.0, 0.0, 0.0],
    2 => [1.0, 0.0, 0.0],
    3 => [1.0, 1.0, 0.0],
    4 => [0.0, 1.0, 0.0],
    5 => [0.0, 0.0, 1.0],
    6 => [1.0, 0.0, 1.0],
    7 => [1.0, 1.0, 1.0],
    8 => [0.0, 1.0, 1.0],
    9 => [0.5, 0.5, 2.0])
#
# element = Element(Hex8, [1, 2, 3, 4, 5, 6, 7, 8])
# update!(element, "geometry", X)
# update!(element, "youngs modulus", 2.080e5)
# update!(element, "poissons ratio", 0.3)
# update!(element, "density", 7.80e-9)

# problem = Problem(Elasticity, "1 hex8 element", 3)
# add_elements!(problem, [element])
# assemble!(problem, 0.0)
# K = full(problem.assembly.K)
# fn = Pkg.dir("FEMCoupling", "test", "test_dcoupling_3d", "stiffness_matrix")
# writedlm(fn, K)

# bc_element = Element(Quad4, [1, 2, 3, 4])
# update!(bc_element, "geometry", X)
# update!(bc_element, "displacement 1", 0.0)
# update!(bc_element, "displacement 2", 0.0)
# update!(bc_element, "displacement 3", 0.0)

# bc = Problem(Dirichlet, "fixed", 3, "displacement")
# add_elements!(bc, [bc_element])

# Distributed coupling

coupling_node_ids = [5, 6, 7, 8]
coupling_nodes = [Element(Poi1, [j]) for j in coupling_node_ids]
reference_node_id = 9
reference_node = Element(Poi1, [reference_node_id])
update!(coupling_nodes, "geometry", X)
update!(reference_node, "geometry", X)
update!(reference_node, "fixed displacement 3", 0.041)

coupling = Problem(Coupling, "brick", 3, "displacement")
add_coupling_nodes!(coupling, coupling_nodes)
add_reference_node!(coupling, reference_node)

assemble!(coupling, 0.0)
# Analysis

# step = Analysis(Nonlinear)
# add_problems!(step, [problem, bc, coupling])
# xdmf = Xdmf("3d_coupling_results"; overwrite=true)
# add_results_writer!(step, xdmf)
# run!(step)
# close(xdmf.hdf)

function read_mtx(data; dim=0)
    if dim == 0
        for ln in eachline(copy(data))
            i,idof,j,jdof,value = map(parse, split(ln, ','))
            dim = max(dim, idof, jdof)
        end
    end
    I = Int64[]
    J = Int64[]
    V = Float64[]
    for ln in eachline(data)
        i,idof,j,jdof,value = map(parse, split(ln, ','))
        if i < 1 || j < 1
            continue
        end
        push!(I, (i-1)*dim+idof)
        push!(J, (j-1)*dim+jdof)
        push!(V, value)
    end
    A = full(sparse(I, J, V))
    A += transpose(tril(A,-1))
    return A
end

function read_mtx_from_str(data)
    read_mtx(IOBuffer(data))
end

K = full(coupling.assembly.K)
K_from_abaqus = read_mtx_from_str("""
-1,1, -1,1,  0.0
5,1, -1,1, -2.500000000000000e-01
5,3, -1,1, -5.000000000000000e-01
6,1, -1,1, -2.500000000000000e-01
6,3, -1,1,  5.000000000000000e-01
7,1, -1,1, -2.500000000000000e-01
7,3, -1,1,  5.000000000000000e-01
8,1, -1,1, -2.500000000000000e-01
8,3, -1,1, -5.000000000000000e-01
9,1, -1,1,  1.000000000000000e+00
-1,2, -1,2,  0.0
5,2, -1,2, -2.500000000000000e-01
5,3, -1,2, -5.000000000000000e-01
6,2, -1,2, -2.500000000000000e-01
6,3, -1,2, -5.000000000000000e-01
7,2, -1,2, -2.500000000000000e-01
7,3, -1,2,  5.000000000000000e-01
8,2, -1,2, -2.500000000000000e-01
8,3, -1,2,  5.000000000000000e-01
9,2, -1,2,  1.000000000000000e+00
-1,3, -1,3,  0.0
5,3, -1,3, -2.500000000000000e-01
6,3, -1,3, -2.500000000000000e-01
7,3, -1,3, -2.500000000000000e-01
8,3, -1,3, -2.500000000000000e-01
9,3, -1,3,  1.000000000000000e+00
1,1, 1,1,  1.000000000000000e+36
1,2, 1,1,  1.305555555555557e+04
1,3, 1,1,  1.305555555555557e+04
2,1, 1,1, -1.379629629629642e+04
2,2, 1,1, -2.777777777778199e+02
2,3, 1,1, -2.777777777778167e+02
3,1, 1,1, -1.898148148148148e+04
3,2, 1,1, -1.305555555555557e+04
3,3, 1,1,  5.277777777777820e+03
4,1, 1,1,  1.231481481481472e+04
4,2, 1,1,  2.777777777778191e+02
4,3, 1,1,  1.194444444444444e+04
5,1, 1,1,  1.231481481481472e+04
5,2, 1,1,  1.194444444444444e+04
5,3, 1,1,  2.777777777778183e+02
6,1, 1,1, -1.898148148148148e+04
6,2, 1,1,  5.277777777777820e+03
6,3, 1,1, -1.305555555555557e+04
7,1, 1,1, -1.824074074074064e+04
7,2, 1,1, -1.194444444444444e+04
7,3, 1,1, -1.194444444444444e+04
8,1, 1,1,  4.907407407407396e+03
8,2, 1,1, -5.277777777777819e+03
8,3, 1,1, -5.277777777777819e+03
1,2, 1,2,  1.000000000000000e+36
1,3, 1,2,  1.305555555555557e+04
2,1, 1,2,  2.777777777778188e+02
2,2, 1,2,  1.231481481481472e+04
2,3, 1,2,  1.194444444444444e+04
3,1, 1,2, -1.305555555555557e+04
3,2, 1,2, -1.898148148148149e+04
3,3, 1,2,  5.277777777777821e+03
4,1, 1,2, -2.777777777778164e+02
4,2, 1,2, -1.379629629629641e+04
4,3, 1,2, -2.777777777778183e+02
5,1, 1,2,  1.194444444444444e+04
5,2, 1,2,  1.231481481481472e+04
5,3, 1,2,  2.777777777778169e+02
6,1, 1,2, -5.277777777777820e+03
6,2, 1,2,  4.907407407407397e+03
6,3, 1,2, -5.277777777777820e+03
7,1, 1,2, -1.194444444444444e+04
7,2, 1,2, -1.824074074074064e+04
7,3, 1,2, -1.194444444444444e+04
8,1, 1,2,  5.277777777777820e+03
8,2, 1,2, -1.898148148148149e+04
8,3, 1,2, -1.305555555555557e+04
1,3, 1,3,  1.000000000000000e+36
2,1, 1,3,  2.777777777778177e+02
2,2, 1,3,  1.194444444444444e+04
2,3, 1,3,  1.231481481481472e+04
3,1, 1,3, -5.277777777777820e+03
3,2, 1,3, -5.277777777777821e+03
3,3, 1,3,  4.907407407407397e+03
4,1, 1,3,  1.194444444444444e+04
4,2, 1,3,  2.777777777778172e+02
4,3, 1,3,  1.231481481481472e+04
5,1, 1,3, -2.777777777778180e+02
5,2, 1,3, -2.777777777778171e+02
5,3, 1,3, -1.379629629629642e+04
6,1, 1,3, -1.305555555555557e+04
6,2, 1,3,  5.277777777777821e+03
6,3, 1,3, -1.898148148148148e+04
7,1, 1,3, -1.194444444444445e+04
7,2, 1,3, -1.194444444444445e+04
7,3, 1,3, -1.824074074074064e+04
8,1, 1,3,  5.277777777777821e+03
8,2, 1,3, -1.305555555555557e+04
8,3, 1,3, -1.898148148148149e+04
2,1, 2,1,  1.000000000000000e+36
2,2, 2,1, -1.305555555555557e+04
2,3, 2,1, -1.305555555555557e+04
3,1, 2,1,  1.231481481481471e+04
3,2, 2,1, -2.777777777778176e+02
3,3, 2,1, -1.194444444444444e+04
4,1, 2,1, -1.898148148148148e+04
4,2, 2,1,  1.305555555555557e+04
4,3, 2,1, -5.277777777777819e+03
5,1, 2,1, -1.898148148148148e+04
5,2, 2,1, -5.277777777777819e+03
5,3, 2,1,  1.305555555555557e+04
6,1, 2,1,  1.231481481481472e+04
6,2, 2,1, -1.194444444444444e+04
6,3, 2,1, -2.777777777778179e+02
7,1, 2,1,  4.907407407407396e+03
7,2, 2,1,  5.277777777777822e+03
7,3, 2,1,  5.277777777777819e+03
8,1, 2,1, -1.824074074074064e+04
8,2, 2,1,  1.194444444444444e+04
8,3, 2,1,  1.194444444444444e+04
2,2, 2,2,  1.000000000000000e+36
2,3, 2,2,  1.305555555555557e+04
3,1, 2,2,  2.777777777778165e+02
3,2, 2,2, -1.379629629629642e+04
3,3, 2,2, -2.777777777778173e+02
4,1, 2,2,  1.305555555555557e+04
4,2, 2,2, -1.898148148148149e+04
4,3, 2,2,  5.277777777777817e+03
5,1, 2,2,  5.277777777777818e+03
5,2, 2,2,  4.907407407407397e+03
5,3, 2,2, -5.277777777777822e+03
6,1, 2,2, -1.194444444444444e+04
6,2, 2,2,  1.231481481481472e+04
6,3, 2,2,  2.777777777778174e+02
7,1, 2,2, -5.277777777777821e+03
7,2, 2,2, -1.898148148148148e+04
7,3, 2,2, -1.305555555555557e+04
8,1, 2,2,  1.194444444444444e+04
8,2, 2,2, -1.824074074074064e+04
8,3, 2,2, -1.194444444444444e+04
2,3, 2,3,  1.000000000000000e+36
3,1, 2,3, -1.194444444444444e+04
3,2, 2,3,  2.777777777778177e+02
3,3, 2,3,  1.231481481481472e+04
4,1, 2,3,  5.277777777777818e+03
4,2, 2,3, -5.277777777777820e+03
4,3, 2,3,  4.907407407407397e+03
5,1, 2,3,  1.305555555555557e+04
5,2, 2,3,  5.277777777777820e+03
5,3, 2,3, -1.898148148148148e+04
6,1, 2,3,  2.777777777778170e+02
6,2, 2,3, -2.777777777778177e+02
6,3, 2,3, -1.379629629629641e+04
7,1, 2,3, -5.277777777777821e+03
7,2, 2,3, -1.305555555555557e+04
7,3, 2,3, -1.898148148148148e+04
8,1, 2,3,  1.194444444444444e+04
8,2, 2,3, -1.194444444444444e+04
8,3, 2,3, -1.824074074074064e+04
3,1, 3,1,  1.000000000000000e+36
3,2, 3,1,  1.305555555555557e+04
3,3, 3,1, -1.305555555555557e+04
4,1, 3,1, -1.379629629629641e+04
4,2, 3,1, -2.777777777778164e+02
4,3, 3,1,  2.777777777778172e+02
5,1, 3,1, -1.824074074074064e+04
5,2, 3,1, -1.194444444444444e+04
5,3, 3,1,  1.194444444444444e+04
6,1, 3,1,  4.907407407407394e+03
6,2, 3,1, -5.277777777777819e+03
6,3, 3,1,  5.277777777777821e+03
7,1, 3,1,  1.231481481481472e+04
7,2, 3,1,  1.194444444444444e+04
7,3, 3,1, -2.777777777778178e+02
8,1, 3,1, -1.898148148148148e+04
8,2, 3,1,  5.277777777777821e+03
8,3, 3,1,  1.305555555555557e+04
3,2, 3,2,  1.000000000000000e+36
3,3, 3,2, -1.305555555555557e+04
4,1, 3,2,  2.777777777778188e+02
4,2, 3,2,  1.231481481481472e+04
4,3, 3,2, -1.194444444444444e+04
5,1, 3,2, -1.194444444444444e+04
5,2, 3,2, -1.824074074074064e+04
5,3, 3,2,  1.194444444444444e+04
6,1, 3,2,  5.277777777777819e+03
6,2, 3,2, -1.898148148148148e+04
6,3, 3,2,  1.305555555555557e+04
7,1, 3,2,  1.194444444444444e+04
7,2, 3,2,  1.231481481481472e+04
7,3, 3,2, -2.777777777778174e+02
8,1, 3,2, -5.277777777777820e+03
8,2, 3,2,  4.907407407407394e+03
8,3, 3,2,  5.277777777777820e+03
3,3, 3,3,  1.000000000000000e+36
4,1, 3,3, -2.777777777778174e+02
4,2, 3,3, -1.194444444444444e+04
4,3, 3,3,  1.231481481481472e+04
5,1, 3,3,  1.194444444444444e+04
5,2, 3,3,  1.194444444444444e+04
5,3, 3,3, -1.824074074074064e+04
6,1, 3,3, -5.277777777777821e+03
6,2, 3,3,  1.305555555555557e+04
6,3, 3,3, -1.898148148148148e+04
7,1, 3,3,  2.777777777778173e+02
7,2, 3,3,  2.777777777778173e+02
7,3, 3,3, -1.379629629629642e+04
8,1, 3,3,  1.305555555555557e+04
8,2, 3,3, -5.277777777777819e+03
8,3, 3,3, -1.898148148148148e+04
4,1, 4,1,  1.000000000000000e+36
4,2, 4,1, -1.305555555555557e+04
4,3, 4,1,  1.305555555555557e+04
5,1, 4,1,  4.907407407407397e+03
5,2, 4,1,  5.277777777777819e+03
5,3, 4,1, -5.277777777777819e+03
6,1, 4,1, -1.824074074074064e+04
6,2, 4,1,  1.194444444444444e+04
6,3, 4,1, -1.194444444444444e+04
7,1, 4,1, -1.898148148148149e+04
7,2, 4,1, -5.277777777777820e+03
7,3, 4,1, -1.305555555555557e+04
8,1, 4,1,  1.231481481481472e+04
8,2, 4,1, -1.194444444444444e+04
8,3, 4,1,  2.777777777778181e+02
4,2, 4,2,  1.000000000000000e+36
4,3, 4,2, -1.305555555555557e+04
5,1, 4,2, -5.277777777777820e+03
5,2, 4,2, -1.898148148148148e+04
5,3, 4,2,  1.305555555555557e+04
6,1, 4,2,  1.194444444444444e+04
6,2, 4,2, -1.824074074074064e+04
6,3, 4,2,  1.194444444444444e+04
7,1, 4,2,  5.277777777777821e+03
7,2, 4,2,  4.907407407407394e+03
7,3, 4,2,  5.277777777777820e+03
8,1, 4,2, -1.194444444444444e+04
8,2, 4,2,  1.231481481481471e+04
8,3, 4,2, -2.777777777778192e+02
4,3, 4,3,  1.000000000000000e+36
5,1, 4,3,  5.277777777777821e+03
5,2, 4,3,  1.305555555555557e+04
5,3, 4,3, -1.898148148148149e+04
6,1, 4,3, -1.194444444444444e+04
6,2, 4,3,  1.194444444444444e+04
6,3, 4,3, -1.824074074074064e+04
7,1, 4,3, -1.305555555555557e+04
7,2, 4,3, -5.277777777777821e+03
7,3, 4,3, -1.898148148148148e+04
8,1, 4,3, -2.777777777778175e+02
8,2, 4,3,  2.777777777778191e+02
8,3, 4,3, -1.379629629629642e+04
5,1, 5,1,  4.052546296296317e+04
5,2, 5,1,  1.305555555555557e+04
5,3, 5,1, -1.293055555555557e+04
6,1, 5,1, -1.373379629629642e+04
6,2, 5,1, -2.777777777778171e+02
6,3, 5,1,  1.527777777778173e+02
7,1, 5,1, -1.891898148148148e+04
7,2, 5,1, -1.305555555555557e+04
7,3, 5,1, -5.402777777777820e+03
8,1, 5,1,  1.237731481481472e+04
8,2, 5,1,  2.777777777778183e+02
8,3, 5,1, -1.181944444444444e+04
9,1, 5,1, -2.500000000000000e+02
5,2, 5,2,  4.052546296296318e+04
5,3, 5,2, -1.293055555555557e+04
6,1, 5,2,  2.777777777778176e+02
6,2, 5,2,  1.237731481481472e+04
6,3, 5,2, -1.181944444444444e+04
7,1, 5,2, -1.305555555555557e+04
7,2, 5,2, -1.891898148148148e+04
7,3, 5,2, -5.402777777777819e+03
8,1, 5,2, -2.777777777778169e+02
8,2, 5,2, -1.373379629629642e+04
8,3, 5,2,  1.527777777778176e+02
9,2, 5,2, -2.500000000000000e+02
5,3, 5,3,  4.102546296296317e+04
6,1, 5,3, -1.527777777778179e+02
6,2, 5,3, -1.181944444444444e+04
6,3, 5,3,  1.237731481481472e+04
7,1, 5,3,  5.402777777777820e+03
7,2, 5,3,  5.402777777777820e+03
7,3, 5,3,  4.469907407407393e+03
8,1, 5,3, -1.181944444444444e+04
8,2, 5,3, -1.527777777778173e+02
8,3, 5,3,  1.237731481481471e+04
9,1, 5,3, -5.000000000000000e+02
9,2, 5,3, -5.000000000000000e+02
9,3, 5,3, -2.500000000000000e+02
6,1, 6,1,  4.052546296296317e+04
6,2, 6,1, -1.305555555555557e+04
6,3, 6,1,  1.293055555555557e+04
7,1, 6,1,  1.237731481481472e+04
7,2, 6,1, -2.777777777778169e+02
7,3, 6,1,  1.181944444444444e+04
8,1, 6,1, -1.891898148148148e+04
8,2, 6,1,  1.305555555555557e+04
8,3, 6,1,  5.402777777777819e+03
9,1, 6,1, -2.500000000000000e+02
6,2, 6,2,  4.052546296296319e+04
6,3, 6,2, -1.293055555555557e+04
7,1, 6,2,  2.777777777778161e+02
7,2, 6,2, -1.373379629629642e+04
7,3, 6,2,  1.527777777778169e+02
8,1, 6,2,  1.305555555555557e+04
8,2, 6,2, -1.891898148148148e+04
8,3, 6,2, -5.402777777777818e+03
9,2, 6,2, -2.500000000000000e+02
6,3, 6,3,  4.102546296296318e+04
7,1, 6,3,  1.181944444444444e+04
7,2, 6,3, -1.527777777778174e+02
7,3, 6,3,  1.237731481481472e+04
8,1, 6,3, -5.402777777777820e+03
8,2, 6,3,  5.402777777777821e+03
8,3, 6,3,  4.469907407407393e+03
9,1, 6,3,  5.000000000000000e+02
9,2, 6,3, -5.000000000000000e+02
9,3, 6,3, -2.500000000000000e+02
7,1, 7,1,  4.052546296296319e+04
7,2, 7,1,  1.305555555555557e+04
7,3, 7,1,  1.293055555555557e+04
8,1, 7,1, -1.373379629629641e+04
8,2, 7,1, -2.777777777778183e+02
8,3, 7,1, -1.527777777778183e+02
9,1, 7,1, -2.500000000000000e+02
7,2, 7,2,  4.052546296296318e+04
7,3, 7,2,  1.293055555555557e+04
8,1, 7,2,  2.777777777778171e+02
8,2, 7,2,  1.237731481481472e+04
8,3, 7,2,  1.181944444444444e+04
9,2, 7,2, -2.500000000000000e+02
7,3, 7,3,  4.102546296296318e+04
8,1, 7,3,  1.527777777778184e+02
8,2, 7,3,  1.181944444444444e+04
8,3, 7,3,  1.237731481481472e+04
9,1, 7,3,  5.000000000000000e+02
9,2, 7,3,  5.000000000000000e+02
9,3, 7,3, -2.500000000000000e+02
8,1, 8,1,  4.052546296296319e+04
8,2, 8,1, -1.305555555555557e+04
8,3, 8,1, -1.293055555555557e+04
9,1, 8,1, -2.500000000000000e+02
8,2, 8,2,  4.052546296296318e+04
8,3, 8,2,  1.293055555555557e+04
9,2, 8,2, -2.500000000000000e+02
8,3, 8,3,  4.102546296296318e+04
9,1, 8,3, -5.000000000000000e+02
9,2, 8,3,  5.000000000000000e+02
9,3, 8,3, -2.500000000000000e+02
9,1, 9,1,  1.000000000000000e+03
9,2, 9,2,  1.000000000000000e+03
9,3, 9,3,  1.000000000000000e+03
""")
K[1:24,1:24] += K_from_abaqus[1:24, 1:24]

f = full(sparse(coupling.assembly.f, 27, 1))
g = full(sparse(coupling.assembly.g, 27, 1))

C1 = full(coupling.assembly.C1, 27, 27)
C2 = full(coupling.assembly.C2, 27, 27)
D = full(coupling.assembly.D, 27, 27)


K = [K C1[:,27];
     C2[27:27,:] D[27,27]]
f = [f;
     g[27]]

# Fixing nodes 1-4
K=K[13:end,13:end]
f=f[13:end]
u = K\f
printa(u)
